#import FWCore.ParameterSet.Config as cms

################################################################################
# Original from PhysicsTools/PatAlgos/python/patTemplate_cfg.py
# modified for use with OpenHLT
################################################################################

#process = cms.Process("PAT")
#isData=True

## MessageLogger
#process.load("FWCore.MessageLogger.MessageLogger_cfi")

## Options and Output Report
process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(False),
    #SkipEvent = cms.untracked.vstring('ProductNotFound')
    ## switch to uncheduled mode
    allowUnscheduled = cms.untracked.bool(True)
)
#process.Tracer = cms.Service("Tracer")

## Source
#process.source = cms.Source("PoolSource",
#    fileNames = cms.untracked.vstring()
#)
## Maximal Number of Events
#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(100) )

## Geometry and Detector Conditions (needed for a few patTuple production steps)
process.load("Configuration.Geometry.GeometryIdeal_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, 'PLS170_V7AN1::All')
process.load("Configuration.StandardSequences.MagneticField_cff")

## Standard PAT Configuration File
#process.load("PhysicsTools.PatAlgos.patSequences_cff")

## Output Module Configuration (expects a path 'p')
#from PhysicsTools.PatAlgos.patEventContent_cff import patEventContentNoCleaning
process.out = cms.OutputModule("PoolOutputModule",
                               fileName = cms.untracked.string('patTuple.root'),
                               # save PAT Layer 1 output; you need a '*' to
                               # unpack the list of commands 'patEventContent'
                               outputCommands = cms.untracked.vstring('drop *') #, 'keep recoPFCandidates_particleFlow_*_*', *patEventContentNoCleaning )
                               )
process.outpath = cms.EndPath(process.out)


################################################################################
# User configurations
################################################################################
#from PhysicsTools.SelectorUtils.pvSelector_cfi import pvSelector
#process.goodOfflinePrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
#    src          = cms.InputTag('offlinePrimaryVertices'),
#    filterParams = pvSelector.clone( minNdof = cms.double(4.0), maxZ = cms.double(24.0) )
#)

#from CommonTools.ParticleFlow.pfNoPileUp_cff import * 
#from CommonTools.ParticleFlow.pfParticleSelection_cff import *
process.load('CommonTools.ParticleFlow.pfNoPileUp_cff')
process.load('CommonTools.ParticleFlow.pfParticleSelection_cff')

process.pfPileUp.checkClosestZVertex = False
process.pfPileUp.Vertices = 'goodOfflinePrimaryVertices'
process.pfPileUp.PFCandidates = 'particleFlowPtrs'
process.pfNoPileUp.bottomCollection = 'particleFlowPtrs'

from CommonTools.ParticleFlow.goodOfflinePrimaryVertices_cfi import goodOfflinePrimaryVertices
process.pfNoPileUpSequence.insert(0, process.goodOfflinePrimaryVertices)

process.pileUpSubtractionSequence = cms.Sequence(
    process.pfNoPileUpSequence +
    process.pfParticleSelectionSequence
    )

from RecoJets.JetProducers.ak5PFJets_cfi import ak5PFJets
process.ak4PFJetsCHS = ak5PFJets.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(20.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.4),
)
jetSource = 'ak4PFJetsCHS'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK4CHS = patJetCorrFactors.clone()
process.patJetCorrFactorsAK4CHS.src = jetSource
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK4CHS.levels = ['L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK4CHS.payload = 'AK4PFchs'
process.patJetCorrFactorsAK4CHS.useRho = True
#
from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK4CHS = patJets.clone()
process.patJetsAK4CHS.jetSource = jetSource
process.patJetsAK4CHS.addJetCharge = False
process.patJetsAK4CHS.embedPFCandidates = False
process.patJetsAK4CHS.addAssociatedTracks = False
process.patJetsAK4CHS.addBTagInfo = False
process.patJetsAK4CHS.addDiscriminators = False
process.patJetsAK4CHS.addJetID = False
process.patJetsAK4CHS.addGenPartonMatch = False
process.patJetsAK4CHS.embedGenPartonMatch = False
process.patJetsAK4CHS.addGenJetMatch = False
process.patJetsAK4CHS.getJetMCFlavour = False
process.patJetsAK4CHS.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK4CHS'))
#
process.ak8PFJetsCHS = ak5PFJets.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.8),
)
jetSource0 = 'ak8PFJetsCHS'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK8CHS = patJetCorrFactors.clone()
process.patJetCorrFactorsAK8CHS.src = jetSource0
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK8CHS.levels = ['L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK8CHS.payload = 'AK8PFchs'
process.patJetCorrFactorsAK8CHS.useRho = True
#
from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK8CHS = patJets.clone()
process.patJetsAK8CHS.jetSource = jetSource0
process.patJetsAK8CHS.addJetCharge = False
process.patJetsAK8CHS.embedPFCandidates = False
process.patJetsAK8CHS.addAssociatedTracks = False
process.patJetsAK8CHS.addBTagInfo = False
process.patJetsAK8CHS.addDiscriminators = False
process.patJetsAK8CHS.addJetID = False
process.patJetsAK8CHS.addGenPartonMatch = False
process.patJetsAK8CHS.embedGenPartonMatch = False
process.patJetsAK8CHS.addGenJetMatch = False
process.patJetsAK8CHS.getJetMCFlavour = False
process.patJetsAK8CHS.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK8CHS'))

from RecoJets.JetProducers.ak4PFJetsTrimmed_cfi import ak4PFJetsTrimmed
process.ak8PFJetsCHSTrim = ak4PFJetsTrimmed.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.8),
)
jetSource2 = 'ak8PFJetsCHSTrim'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK8CHSTrim = patJetCorrFactors.clone()
process.patJetCorrFactorsAK8CHSTrim.src = jetSource2
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK8CHSTrim.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK8CHSTrim.payload = 'AK8PFchs'
process.patJetCorrFactorsAK8CHSTrim.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK8CHSTrim = patJets.clone()
process.patJetsAK8CHSTrim.jetSource = jetSource2
process.patJetsAK8CHSTrim.addJetCharge = False
process.patJetsAK8CHSTrim.embedPFCandidates = False
process.patJetsAK8CHSTrim.addAssociatedTracks = False
process.patJetsAK8CHSTrim.addBTagInfo = False
process.patJetsAK8CHSTrim.addDiscriminators = False
process.patJetsAK8CHSTrim.addJetID = False
process.patJetsAK8CHSTrim.addGenPartonMatch = False
process.patJetsAK8CHSTrim.embedGenPartonMatch = False
process.patJetsAK8CHSTrim.addGenJetMatch = False
process.patJetsAK8CHSTrim.getJetMCFlavour = False
process.patJetsAK8CHSTrim.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK8CHSTrim'))

process.ak8PFJetsCHSTrimMod = ak4PFJetsTrimmed.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.8),
  rFilt = cms.double(0.1),
)
jetSource3 = 'ak8PFJetsCHSTrimMod'

#### Adding corrections 
process.patJetCorrFactorsAK8CHSTrimMod = patJetCorrFactors.clone()
process.patJetCorrFactorsAK8CHSTrimMod.src = jetSource3
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK8CHSTrimMod.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK8CHSTrimMod.payload = 'AK8PFchs'
process.patJetCorrFactorsAK8CHSTrimMod.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK8CHSTrimMod = patJets.clone()
process.patJetsAK8CHSTrimMod.jetSource = jetSource3
process.patJetsAK8CHSTrimMod.addJetCharge = False
process.patJetsAK8CHSTrimMod.embedPFCandidates = False
process.patJetsAK8CHSTrimMod.addAssociatedTracks = False
process.patJetsAK8CHSTrimMod.addBTagInfo = False
process.patJetsAK8CHSTrimMod.addDiscriminators = False
process.patJetsAK8CHSTrimMod.addJetID = False
process.patJetsAK8CHSTrimMod.addGenPartonMatch = False
process.patJetsAK8CHSTrimMod.embedGenPartonMatch = False
process.patJetsAK8CHSTrimMod.addGenJetMatch = False
process.patJetsAK8CHSTrimMod.getJetMCFlavour = False
process.patJetsAK8CHSTrimMod.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK8CHSTrimMod'))

#### Pruning
from RecoJets.JetProducers.ak4PFJetsPruned_cfi import ak4PFJetsPruned
process.ak8PFJetsCHSPruned = ak4PFJetsPruned.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
#  rParam = cms.double(0.8),
#  rFilt = cms.double(0.1),
)
jetSource4 = 'ak8PFJetsCHSPruned'

#### Adding corrections 
process.patJetCorrFactorsAK8CHSPruned = patJetCorrFactors.clone()
process.patJetCorrFactorsAK8CHSPruned.src = jetSource4
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK8CHSPruned.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK8CHSPruned.payload = 'AK8PFchs'
process.patJetCorrFactorsAK8CHSPruned.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK8CHSPruned = patJets.clone()
process.patJetsAK8CHSPruned.jetSource = jetSource4
process.patJetsAK8CHSPruned.addJetCharge = False
process.patJetsAK8CHSPruned.embedPFCandidates = False
process.patJetsAK8CHSPruned.addAssociatedTracks = False
process.patJetsAK8CHSPruned.addBTagInfo = False
process.patJetsAK8CHSPruned.addDiscriminators = False
process.patJetsAK8CHSPruned.addJetID = False
process.patJetsAK8CHSPruned.addGenPartonMatch = False
process.patJetsAK8CHSPruned.embedGenPartonMatch = False
process.patJetsAK8CHSPruned.addGenJetMatch = False
process.patJetsAK8CHSPruned.getJetMCFlavour = False
process.patJetsAK8CHSPruned.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK8CHSPruned'))

#
process.ak10PFJetsCHS = ak5PFJets.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(1.0),
)
jetSource5 = 'ak10PFJetsCHS'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK10CHS = patJetCorrFactors.clone()
process.patJetCorrFactorsAK10CHS.src = jetSource5
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK10CHS.levels = ['L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK10CHS.payload = 'AK10PFchs'
process.patJetCorrFactorsAK10CHS.useRho = True
#
from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK10CHS = patJets.clone()
process.patJetsAK10CHS.jetSource = jetSource5
process.patJetsAK10CHS.addJetCharge = False
process.patJetsAK10CHS.embedPFCandidates = False
process.patJetsAK10CHS.addAssociatedTracks = False
process.patJetsAK10CHS.addBTagInfo = False
process.patJetsAK10CHS.addDiscriminators = False
process.patJetsAK10CHS.addJetID = False
process.patJetsAK10CHS.addGenPartonMatch = False
process.patJetsAK10CHS.embedGenPartonMatch = False
process.patJetsAK10CHS.addGenJetMatch = False
process.patJetsAK10CHS.getJetMCFlavour = False
process.patJetsAK10CHS.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK10CHS'))

from RecoJets.JetProducers.ak4PFJetsTrimmed_cfi import ak4PFJetsTrimmed
process.ak10PFJetsCHSTrim = ak4PFJetsTrimmed.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(1.0),
)
jetSource6 = 'ak10PFJetsCHSTrim'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK10CHSTrim = patJetCorrFactors.clone()
process.patJetCorrFactorsAK10CHSTrim.src = jetSource6
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK10CHSTrim.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK10CHSTrim.payload = 'AK10PFchs'
process.patJetCorrFactorsAK10CHSTrim.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK10CHSTrim = patJets.clone()
process.patJetsAK10CHSTrim.jetSource = jetSource6
process.patJetsAK10CHSTrim.addJetCharge = False
process.patJetsAK10CHSTrim.embedPFCandidates = False
process.patJetsAK10CHSTrim.addAssociatedTracks = False
process.patJetsAK10CHSTrim.addBTagInfo = False
process.patJetsAK10CHSTrim.addDiscriminators = False
process.patJetsAK10CHSTrim.addJetID = False
process.patJetsAK10CHSTrim.addGenPartonMatch = False
process.patJetsAK10CHSTrim.embedGenPartonMatch = False
process.patJetsAK10CHSTrim.addGenJetMatch = False
process.patJetsAK10CHSTrim.getJetMCFlavour = False
process.patJetsAK10CHSTrim.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK10CHSTrim'))

process.ak10PFJetsCHSTrimMod = ak4PFJetsTrimmed.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(1.0),
  rFilt = cms.double(0.1),
)
jetSource7 = 'ak10PFJetsCHSTrimMod'

#### Adding corrections 
process.patJetCorrFactorsAK10CHSTrimMod = patJetCorrFactors.clone()
process.patJetCorrFactorsAK10CHSTrimMod.src = jetSource7
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK10CHSTrimMod.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK10CHSTrimMod.payload = 'AK10PFchs'
process.patJetCorrFactorsAK10CHSTrimMod.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK10CHSTrimMod = patJets.clone()
process.patJetsAK10CHSTrimMod.jetSource = jetSource7
process.patJetsAK10CHSTrimMod.addJetCharge = False
process.patJetsAK10CHSTrimMod.embedPFCandidates = False
process.patJetsAK10CHSTrimMod.addAssociatedTracks = False
process.patJetsAK10CHSTrimMod.addBTagInfo = False
process.patJetsAK10CHSTrimMod.addDiscriminators = False
process.patJetsAK10CHSTrimMod.addJetID = False
process.patJetsAK10CHSTrimMod.addGenPartonMatch = False
process.patJetsAK10CHSTrimMod.embedGenPartonMatch = False
process.patJetsAK10CHSTrimMod.addGenJetMatch = False
process.patJetsAK10CHSTrimMod.getJetMCFlavour = False
process.patJetsAK10CHSTrimMod.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK10CHSTrimMod'))

#### Pruning
from RecoJets.JetProducers.ak4PFJetsPruned_cfi import ak4PFJetsPruned
process.ak10PFJetsCHSPruned = ak4PFJetsPruned.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(100.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(1.0),
#  rFilt = cms.double(0.1),
)
jetSource8 = 'ak10PFJetsCHSPruned'

#### Adding corrections 
process.patJetCorrFactorsAK10CHSPruned = patJetCorrFactors.clone()
process.patJetCorrFactorsAK10CHSPruned.src = jetSource8
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK10CHSPruned.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK10CHSPruned.payload = 'AK10PFchs'
process.patJetCorrFactorsAK10CHSPruned.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK10CHSPruned = patJets.clone()
process.patJetsAK10CHSPruned.jetSource = jetSource8
process.patJetsAK10CHSPruned.addJetCharge = False
process.patJetsAK10CHSPruned.embedPFCandidates = False
process.patJetsAK10CHSPruned.addAssociatedTracks = False
process.patJetsAK10CHSPruned.addBTagInfo = False
process.patJetsAK10CHSPruned.addDiscriminators = False
process.patJetsAK10CHSPruned.addJetID = False
process.patJetsAK10CHSPruned.addGenPartonMatch = False
process.patJetsAK10CHSPruned.embedGenPartonMatch = False
process.patJetsAK10CHSPruned.addGenJetMatch = False
process.patJetsAK10CHSPruned.getJetMCFlavour = False
process.patJetsAK10CHSPruned.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK10CHSPruned'))


# Add PF2PAT output to the created file
process.out.outputCommands.extend( [
    "keep *_patJets*_*_*",
    "keep *_goodOfflinePrimaryVertices_*_*",
    ] )


