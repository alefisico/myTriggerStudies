#import FWCore.ParameterSet.Config as cms

################################################################################
# Original from PhysicsTools/PatAlgos/python/patTemplate_cfg.py
# modified for use with OpenHLT
################################################################################

#process = cms.Process("PAT")
#isData=True

## MessageLogger
#process.load("FWCore.MessageLogger.MessageLogger_cfi")

## Options and Output Report
process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool(True),
    #SkipEvent = cms.untracked.vstring('ProductNotFound')
    ## switch to uncheduled mode
    allowUnscheduled = cms.untracked.bool(True)
)
#process.Tracer = cms.Service("Tracer")

## Source
#process.source = cms.Source("PoolSource",
#    fileNames = cms.untracked.vstring()
#)
## Maximal Number of Events
#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(100) )

## Geometry and Detector Conditions (needed for a few patTuple production steps)
process.load("Configuration.Geometry.GeometryIdeal_cff")
process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
from Configuration.AlCa.GlobalTag import GlobalTag
process.GlobalTag = GlobalTag(process.GlobalTag, 'PLS170_V7AN1::All')
process.load("Configuration.StandardSequences.MagneticField_cff")

## Standard PAT Configuration File
#process.load("PhysicsTools.PatAlgos.patSequences_cff")

## Output Module Configuration (expects a path 'p')
#from PhysicsTools.PatAlgos.patEventContent_cff import patEventContentNoCleaning
process.out = cms.OutputModule("PoolOutputModule",
                               fileName = cms.untracked.string('patTuple.root'),
                               # save PAT Layer 1 output; you need a '*' to
                               # unpack the list of commands 'patEventContent'
                               outputCommands = cms.untracked.vstring('drop *') #, 'keep recoPFCandidates_particleFlow_*_*', *patEventContentNoCleaning )
                               )
process.outpath = cms.EndPath(process.out)


################################################################################
# User configurations
################################################################################
#from PhysicsTools.SelectorUtils.pvSelector_cfi import pvSelector
#process.goodOfflinePrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
#    src          = cms.InputTag('offlinePrimaryVertices'),
#    filterParams = pvSelector.clone( minNdof = cms.double(4.0), maxZ = cms.double(24.0) )
#)

#from CommonTools.ParticleFlow.pfNoPileUp_cff import * 
#from CommonTools.ParticleFlow.pfParticleSelection_cff import *
process.load('CommonTools.ParticleFlow.pfNoPileUp_cff')
process.load('CommonTools.ParticleFlow.pfParticleSelection_cff')

process.pfPileUp.checkClosestZVertex = False
process.pfPileUp.Vertices = 'goodOfflinePrimaryVertices'
process.pfPileUp.PFCandidates = 'particleFlowPtrs'
process.pfNoPileUp.bottomCollection = 'particleFlowPtrs'

from CommonTools.ParticleFlow.goodOfflinePrimaryVertices_cfi import goodOfflinePrimaryVertices
process.pfNoPileUpSequence.insert(0, process.goodOfflinePrimaryVertices)

process.pileUpSubtractionSequence = cms.Sequence(
    process.pfNoPileUpSequence +
    process.pfParticleSelectionSequence
    )

from RecoJets.JetProducers.ak5PFJets_cfi import ak5PFJets
process.ak4PFJetsCHS = ak5PFJets.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(20.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.4),
)
jetSource = 'ak5PFJetsCHS'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK4CHS = patJetCorrFactors.clone()
process.patJetCorrFactorsAK4CHS.src = jetSource
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK4CHS.levels = ['L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK4CHS.payload = 'AK4PFchs'
process.patJetCorrFactorsAK4CHS.useRho = True
#
from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK4CHS = patJets.clone()
process.patJetsAK4CHS.jetSource = jetSource
process.patJetsAK4CHS.addJetCharge = False
process.patJetsAK4CHS.embedPFCandidates = False
process.patJetsAK4CHS.addAssociatedTracks = False
process.patJetsAK4CHS.addBTagInfo = False
process.patJetsAK4CHS.addDiscriminators = False
process.patJetsAK4CHS.addJetID = False
process.patJetsAK4CHS.addGenPartonMatch = False
process.patJetsAK4CHS.embedGenPartonMatch = False
process.patJetsAK4CHS.addGenJetMatch = False
process.patJetsAK4CHS.getJetMCFlavour = False
process.patJetsAK4CHS.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK4CHS'))
#

from RecoJets.JetProducers.ak4PFJetsTrimmed_cfi import ak4PFJetsTrimmed
process.ak8PFJetsCHStrimmed = ak4PFJetsTrimmed.clone(
  src = 'pfNoPileUp',
  jetPtMin = cms.double(20.0),
  doAreaFastjet = cms.bool(True),
  rParam = cms.double(0.8),
  rFilt = cms.double(0.1),
)
jetSource2 = 'ak8PFJetsCHStrimmed'

#### Adding corrections 
from PhysicsTools.PatAlgos.recoLayer0.jetCorrFactors_cfi import *
process.patJetCorrFactorsAK8CHS = patJetCorrFactors.clone()
process.patJetCorrFactorsAK8CHS.src = jetSource2
## will need to add L2L3 corrections in the cfg
process.patJetCorrFactorsAK8CHS.levels = [ ] #'L1FastJet', 'L2Relative', 'L3Absolute']
process.patJetCorrFactorsAK8CHS.payload = 'AK8PFchs'
process.patJetCorrFactorsAK8CHS.useRho = False
#
#from PhysicsTools.PatAlgos.producersLayer1.jetProducer_cfi import *
process.patJetsAK8CHS = patJets.clone()
process.patJetsAK8CHS.jetSource = jetSource2
process.patJetsAK8CHS.addJetCharge = False
process.patJetsAK8CHS.embedPFCandidates = False
process.patJetsAK8CHS.addAssociatedTracks = False
process.patJetsAK8CHS.addBTagInfo = False
process.patJetsAK8CHS.addDiscriminators = False
process.patJetsAK8CHS.addJetID = False
process.patJetsAK8CHS.addGenPartonMatch = False
process.patJetsAK8CHS.embedGenPartonMatch = False
process.patJetsAK8CHS.addGenJetMatch = False
process.patJetsAK8CHS.getJetMCFlavour = False
process.patJetsAK8CHS.jetCorrFactorsSource = cms.VInputTag(cms.InputTag('patJetCorrFactorsAK8CHS'))

# Add PF2PAT output to the created file
process.out.outputCommands.extend( [
    "keep *_patJets*__*",
    ] )


